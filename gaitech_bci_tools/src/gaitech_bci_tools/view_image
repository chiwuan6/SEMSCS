#!/usr/bin/env python
#####################################################################
# Software License Agreement (BSD License)
#
#  Copyright (c) 2018, Gaitech Robotics
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of the Gaitech Robotics nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#####################################################################
"""
View Flickering Image
ROS Node
"""
import rospy, sys, os
from PyQt4 import QtCore, QtGui
from threading import Thread
from gaitech_bci_tools import FlickeringImageWidget, ImageLeft, ImageRight, ImageUp, ImageDown, ImageStop


def get_param(name, value=None):
    private = "~%s" % name
    if rospy.has_param(private):
        print 'has param'
        return rospy.get_param(private)
    elif rospy.has_param(name):
        return rospy.get_param(name)
    else:
        return value


def _txt2clr(_txt):
    """
    convert value from combo box to color
    :param _txt:
    :return:
    """
    _clr = str(_txt).lower()
    if _clr == 'white':
        return QtCore.Qt.white
    if _clr == 'black':
        return QtCore.Qt.black
    if _clr == 'red':
        return QtCore.Qt.red
    if _clr == 'dark red':
        return QtCore.Qt.darkRed
    if _clr == 'green':
        return QtCore.Qt.green
    if _clr == 'dark green':
        return QtCore.Qt.darkGreen
    if _clr == 'blue':
        return QtCore.Qt.blue
    if _clr == 'dark blue':
        return QtCore.Qt.darkBlue
    if _clr == 'cyan':
        return QtCore.Qt.cyan
    if _clr == 'dark cyan':
        return QtCore.Qt.darkCyan
    if _clr == 'yellow':
        return QtCore.Qt.yellow
    if _clr == 'dark yellow':
        return QtCore.Qt.darkYellow
    if _clr == 'magenta':
        return QtCore.Qt.magenta
    if _clr == 'dark magenta':
        return QtCore.Qt.darkMagenta
    return None


if __name__ == '__main__':
    rospy.init_node('view_flickering_image',anonymous=True)
    rospy.loginfo('Starting view_flickering_image')
    app = QtGui.QApplication(sys.argv)
    ######### Options #######
    imtype = get_param("~type", 0)    # O for up , 1 for down, 2 for left, 3 for right, any other for Stop
    if imtype == 0:
        impath = ImageUp
    elif imtype == 1:
        impath = ImageDown
    elif imtype == 2:
        impath = ImageLeft
    elif imtype == 3:
        impath = ImageRight
    else:
        impath = ImageStop
    imagepath = get_param("~image", "")
    if imagepath is not None and imagepath != "" and os.path.isfile(imagepath):
        impath = imagepath
    freq = get_param("~frequency", 12.0)
    bg = get_param("~background", "transparent")
    fg = get_param("~foreground", "None")
    fgcolor = _txt2clr(fg)
    #########################
    rospy.loginfo('Will show %s @ %f with %s background and %s foreground', impath, freq, bg, fgcolor)
    wdg = FlickeringImageWidget()
    wdg.setImage(impath, clr=fgcolor)
    wdg.changeBackground(bg)
    wdg.setFrequency(freq)
    wdg.showMaximized()
    wdg.start()
    #########
    app.exec_()
    rospy.loginfo('Exiting view_flickering_image')
