#!/usr/bin/env python
#####################################################################
# Software License Agreement (BSD License)
#
#  Copyright (c) 2018, Gaitech Robotics
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of the Gaitech Robotics nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#####################################################################
"""
Convert Data from rosbag file to Matlab .mat file
"""
import rospy, sys, os
from optparse import OptionParser
from gaitech_bci_tools import LoadEEGDataFromBagFile


def _check_file_writable(fnm):
    if os.path.exists(fnm):
        # path exists
        if os.path.isfile(fnm): # Check if it is a file
            # also works when file is a link and the target is writable
            return os.access(fnm, os.W_OK)
        else:
            return False # path is a dir, so cannot write as a file
    pdir = os.path.dirname(fnm) # Check file directory
    if not pdir: pdir = '.'
    return os.access(pdir, os.W_OK)


def _parseargs():
    parser = OptionParser()
    parser.add_option("-i", "--input", dest="input", help="input *.rosbag file", metavar="FILE")
    parser.add_option("-o", "--output", dest="output", help="output *.mat file", metavar="FILE")
    (options, args) = parser.parse_args()
    if options.input is None:
        print 'No Input file specified'
        parser.print_help()
        sys.exit(-1)
    if options.output is None:
        print 'No Output file specified'
        parser.print_help()
        sys.exit(-1)
    if not os.path.isfile(options.input):
        print 'Can not open %s' % str(options.input)
        sys.exit(-1)
    if not _check_file_writable(options.output):
        print 'Can not write output file to %s' % str(options.output)
        sys.exit(-1)
    return options.input, options.output


if __name__ == '__main__':
    _ifile, _ofile = _parseargs()
    _Data = LoadEEGDataFromBagFile(None, _ifile)
    if _Data['mode'] != '':
        # There is some data in file #
        import numpy as np
        from scipy.io import savemat
        # Convert to a type that can be read in matlab
        _M = _Data['markers']
        _mt = [_a[1] for _a in _M]
        _mn = [_a[0] for _a in _M]
        _me = [_a[2] for _a in _M]
        _mr = [_a[3] for _a in _M]
        _Data['mtime'] = _mt
        _Data['markers'] = np.asarray(_mn, dtype='object')
        _Data['events'] = np.asarray(_me, dtype='object')
        _Data['remarks'] = np.asarray(_mr, dtype='object')
        savemat(_ofile, _Data, appendmat=False)
        print 'Successfully converted to %s' % str(_ofile)
    else:
        print 'Can not find valid data in bag file'
